---
title: "HW3"
format: html
editor: visual
---

##Task 1 

1. If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?
- ../MyData.csv
  
2. What are the major benefits of using R projects?
- It's organized and there is a consistent structure for each R project. It's also really easy to collaborate with others using R project. 

3. What is git and what is github?
- Git is a free and open-source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Github is a web-based platform that helps developers collaborate on and manage software projects.  

4. What are the two main differences between a tibble and a data.frame?
- Printing and subsetting are the two main differences between a tibble and a data frame. Tibbles have a refined print method that shows only the first 10 rows, and all the columns that fit on screen. 

5. Rewrite the following nested function call using baseRâ€™s chaining operator:
arrange(filter(select(as_tibble(iris), starts_with("Petal"), Species), Petal.Length <1.55), Species)
```{r}
iris %>%
  as_tibble() %>%
  select(starts_with("Petal"), Species) %>%
  filter(Petal.Length < 1.55) %>%
  arrange(Species)
```

6. What is meant by long format data and wide format data? Which do we generally prefer for statistical analysis?
- In long format data, each row represents a single observation, and there is a single column for each variable and this is preferred for statistical analysis. In wide format data, each subject or observational unit is represented by a single row, with multiple columns for different variables or measurements. 

##Task 2 : Reading Delimited Data
```{r}
library(readr)
library(tidyverse)
glass_data <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/glass.data", c("Id", "RI", "Na", "Mg", "Al", "Si", "K", "Ca", "Ba", "Fe", "Type"))
glass_data2 <- glass_data %>%
  mutate(Type = case_when(
    Type == 1 ~ "building_windows_float_processed",
    Type == 2 ~ "building_windows_non_float_processed",
    Type == 3 ~ "vehicle_windows_float_processed",
    Type == 4 ~ "vehicle_windows_non_float_processed",  
    Type == 5 ~ "containers",
    Type == 6 ~ "tableware",
    Type == 7 ~ "headlamps",
    TRUE ~ as.character(Type)  
  )) %>%
  filter(Fe < 0.2, Type %in% c("tableware", "headlamps"))

yeast_data <- read_table("https://www4.stat.ncsu.edu/~online/datasets/yeast.data", c("seq_name", "mcg", "gvh", "alm", "mit", "erl", "pox", "vac", "nuc", "class"))

yeast_data2 <- yeast_data %>%
  select(-seq_name, -nuc) %>%
  group_by(class) %>%
  summarize(across(where(is.numeric), list(mean=mean, sd=sd), .names = "{.col}_{.fn}"))

```


##Task 2: Combining Excel and Delimited Data

```{r}
#1
install.packages("readxl")
library(readxl)
white_wine <- read_excel("white-wine.xlsx", sheet = "white-wine")
print(white_wine)

#2
white_wine2 <- read_excel("white-wine.xlsx", sheet = "variables")
colnames(white_wine) <- white_wine2[[1]]

#3
white_wine <- drop_na(white_wine)
white_wine <- white_wine %>%  mutate(wine_type = 'white')

#4
install.packages("readr")
library(readr)
red_wine <- readr::read_delim("https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv", delim = ";")
str(red_wine)
red_wine$type <- "red"

#5
library(dplyr)
combined <- bind_rows(red_wine, white_wine)

#6
filtered <- combined %>% filter(quality > 6.5, alcohol < 132)

#7
sorted <- filtered %>% arrange(desc(quality))

#8
selected <- sorted %>% select(matches("acid"), alcohol, type, quality)

#9
final <- selected %>% group_by(quality) %>% mutate(mean_alcohol = mean(alcohol), sd_alcohol = sd(alcohol)) %>% ungroup()
```


##Task 3: Database Practice
```{r}
#1
install.packages("DBI")
install.packages("bigrquery")
library(DBI)
library(bigrquery)
con <- dbConnect(
  bigrquery::bigquery(),
  project = "bigquery-public-data",
  dataset = "google_trends",
  billing = "st-558-425505"
)
dbListTables(con)

#2
library(dbplyr)
teams_tbl <- tbl(con, "Teams")
teams_2015 <- teams_tbl %>% filter(yearID == 2015) %>% collect()

#3
teams_2015_sql <- tbl(con, sql("SELECT * FROM Teams WHERE yearID = 2015")) %>% collect()

#4
query_4 <- "
SELECT playerID, yearid, category
FROM HallOfFame
WHERE inducted = 'Y'
"
result4 <- dbGetQuery(con, query_4)

#5
query_5 <- "
SELECT H.playerID, H.yearid, H.category, P.nameFirst, P.nameLast
FROM HallOfFame H
JOIN People P ON H.playerID = P.playerID
WHERE H.inducted = 'Y'
"
result5 <- dbGetQuery(con, query_5)

#6
query_6 <- "
SELECT M.playerID, SUM(M.G) AS G_managed, SUM(M.W) AS Total_W, SUM(M.L) AS Total_L,
       CAST(SUM(M.W) AS REAL) / CAST(SUM(M.G) AS REAL) AS WL_percentage
FROM Managers M
GROUP BY M.playerID
ORDER BY WL_percentage DESC
"
result6 <- dbGetQuery(con, query_6)

#7
query_7 <- "
SELECT H.playerID, H.yearid, H.category, P.nameFirst, P.nameLast,
       M.G_managed, M.Total_W, M.Total_L, M.WL_percentage
FROM
  (SELECT H.playerID, H.yearid, H.category
   FROM HallOfFame H
   WHERE H.inducted = 'Y') AS H
LEFT JOIN People P ON H.playerID = P.playerID
LEFT JOIN
  (SELECT M.playerID, SUM(M.G) AS G_managed, SUM(M.W) AS Total_W, SUM(M.L) AS Total_L,
          CAST(SUM(M.W) AS REAL) / CAST(SUM(M.G) AS REAL) AS WL_percentage
   FROM Managers M
   GROUP BY M.playerID) AS M ON H.playerID = M.playerID
"
result7 <- dbGetQuery(con, query_7)
```

